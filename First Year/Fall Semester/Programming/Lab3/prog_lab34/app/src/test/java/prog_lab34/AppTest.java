/*
 * This source file was generated by the Gradle 'init' task
 */
package prog_lab34;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import prog_lab34.argparser.ArgParser;
import prog_lab34.interaction.Interaction;
import prog_lab34.interaction.community.ShortyGroup;
import prog_lab34.interaction.community.exceptions.ShortyAlreadyExistsException;
import prog_lab34.interaction.filmhero.FilmHero;
import prog_lab34.interaction.filmhero.action.FallAction;
import prog_lab34.interaction.filmhero.action.JumpAction;
import prog_lab34.interaction.filmhero.action.RunAction;
import prog_lab34.interaction.filmhero.exceptions.*;
import prog_lab34.interaction.shorty.constants.TimeSpent;
import prog_lab34.interaction.shorty.gamblers.Gamblers;
import prog_lab34.interaction.shorty.wheelers.Wheelers;
import prog_lab34.parsingconfigfile.SimpleObjProvider;
import prog_lab34.parsingconfigfile.FileObjProvider;

import prog_lab34.interaction.shorty.carouselers.exception.CarouselersArentInAttractionParkException;
import prog_lab34.interaction.shorty.Shorty;
import prog_lab34.interaction.shorty.carouselers.*;
import prog_lab34.interaction.location.tablelocation.TableLocation;

import prog_lab34.interaction.shorty.leapfrogplayers.exception.LeapfrogPlayersCannotBeInTableLocation;
import prog_lab34.interaction.shorty.leapfrogplayers.*;

import prog_lab34.interaction.shorty.wheelers.exception.WheelersArentInAttractionParkException;
import prog_lab34.interaction.location.grasslocation.GrassLocation;

class AppTest {
    @Test
    public void testSimpleObjProviderPathConfigFile() {
        IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> {
            Interaction interaction = new Interaction(new SimpleObjProvider());
            System.out.println(interaction.startInteraction("path"));

        });

        assertEquals("[Error] SimpleObjProvider does not support working with a config file.", thrown.getMessage());
    }

    @Test
    public void testFileObjProviderNoPathConfigFile() {
        IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> {
            Interaction interaction = new Interaction(new FileObjProvider());
            System.out.println(interaction.startInteraction());

        });

        assertEquals("[Error] The path to the config file for FileObjProvider was not passed.", thrown.getMessage());
    }

    @Test
    public void testRepeatShorty() {
        ShortyAlreadyExistsException thrown = assertThrows(ShortyAlreadyExistsException.class, () -> {
            ShortyGroup myGroup = new ShortyGroup();

            myGroup.addShorty(new Gamblers(), new Wheelers(TimeSpent.FROM_MORNING_TO_EVENING), new Gamblers());

        });

        assertEquals("[Error] Shorty has already been added to the group: Картежники", thrown.getMessage());
    }

    @Test
    public void testRepeatActivityHeroFilm() {
        ActionAlreadyExistsException thrown = assertThrows(ActionAlreadyExistsException.class, () -> {
            FilmHero hero = new FilmHero();
            hero.addAction(new FallAction(), new JumpAction(), new RunAction(), new JumpAction());

        });

        assertEquals("[Error] Action has already been added: JumpAction", thrown.getMessage());
    }

    @Test
    public void testCarouselersArentInParkAttractionSetter() {

        CarouselersArentInAttractionParkException thrown = assertThrows(CarouselersArentInAttractionParkException.class, () -> {
            Shorty sh = new Carouselers();
            sh.setLocation(new TableLocation());
        });

        assertEquals("[Error] Carouselers can only located in the attraction park.", thrown.getMessage());
    }

    @Test
    public void testCarouselersArentInParkAttractionConstructor() {
        CarouselersArentInAttractionParkException thrown = assertThrows(CarouselersArentInAttractionParkException.class, () -> {
            new Carouselers(new TableLocation());
        });

        assertEquals("[Error] Carouselers can only located in the attraction park.", thrown.getMessage());
    }

    @Test
    public void testLeapfrogPlayersCannotBeInTableLocationSetter() {

        LeapfrogPlayersCannotBeInTableLocation thrown = assertThrows(LeapfrogPlayersCannotBeInTableLocation.class, () -> {
            Shorty sh = new LeapfrogPlayers();
            sh.setLocation(new TableLocation());
        });

        assertEquals("[Error] LeapfrogPlayres cannot interact in the TableLocation.", thrown.getMessage());
    }

    @Test
    public void testLeapfrogPlayersCannotBeInTableLocationConstructor() {
        LeapfrogPlayersCannotBeInTableLocation thrown = assertThrows(LeapfrogPlayersCannotBeInTableLocation.class, () -> {
            new LeapfrogPlayers(new TableLocation());
        });

        assertEquals("[Error] LeapfrogPlayres cannot interact in the TableLocation.", thrown.getMessage());
    }

    @Test
    public void testWheelersArentInAttractionParkExceptionSetter() {

        WheelersArentInAttractionParkException thrown = assertThrows(WheelersArentInAttractionParkException.class, () -> {
            Shorty sh = new Wheelers();
            sh.setLocation(new GrassLocation());
        });

        assertEquals("[Error] Wheelers can only located in the attraction park.", thrown.getMessage());
    }

    @Test
    public void testWheelersArentInAttractionParkExceptionConstructor() {
        WheelersArentInAttractionParkException thrown = assertThrows(WheelersArentInAttractionParkException.class, () -> {
            new Wheelers(new GrassLocation());
        });

        assertEquals("[Error] Wheelers can only located in the attraction park.", thrown.getMessage());
    }

    @Test
    public void testArgParserNoTypeProvider() {
        IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> {
            String[] args = {"--path=D:/ITMO/sppo_2024/OPD"};
            new ArgParser(args);
        });

        assertEquals("[Error] A required argument was not passed: provider or p.", thrown.getMessage());
    }

    @Test
    public void testArgParserErrorArgument() {
        IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> {
            String[] args = {"--provider=top"};
            new ArgParser(args);
        });

        assertEquals("[Error] The value for --provider should be 'config' or 'simple'.", thrown.getMessage());
    }

    @Test
    public void testArgParserErrorArgumentShort() {
        IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> {
            String[] args = {"-p=t"};
            new ArgParser(args);
        });

        assertEquals("[Error] The value for --p should be 'c' or 's'.", thrown.getMessage());
    }

    @Test
    public void testArgParserNoPathForFileProvider() {
        IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> {
            String[] args = {"--provider=config"};
            new ArgParser(args);
        });

        assertEquals("[Error] The 'path' argument must be provided when 'config' is specified.", thrown.getMessage());
    }

    @Test
    public void testArgParserNoPathForFileProviderShort() {
        IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> {
            String[] args = {"-p=c"};
            new ArgParser(args);
        });

        assertEquals("[Error] The 'path' argument must be provided when 'config' is specified.", thrown.getMessage());
    }

}
